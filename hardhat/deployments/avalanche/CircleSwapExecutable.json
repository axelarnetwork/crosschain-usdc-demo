{
  "address": "0xb7690afD76081A688C0C022FD31393dE657448D3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_circleBridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNativeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyForecalled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedByGateway",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TradeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "refundAddress",
          "type": "address"
        }
      ],
      "name": "SwapFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "SwapPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "tradeData",
          "type": "bytes"
        }
      ],
      "name": "SwapSuccess",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "chain_",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "addSibling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "amountPostFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circleBridge",
      "outputs": [
        {
          "internalType": "contract ICircleBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "destinationDomains",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "executeWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "forecaller",
          "type": "address"
        }
      ],
      "name": "forecall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "forecaller",
          "type": "address"
        }
      ],
      "name": "forecallWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "contract IAxelarGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "tradeData1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "tradeData2",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "fallbackRecipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "inputPos",
          "type": "uint16"
        }
      ],
      "name": "nativeTradeSendTrade",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "siblings",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a300040e2b82ad5c641b4b4a91c713c28bad9f831360f7b845a1e8a010c8125",
  "receipt": {
    "to": null,
    "from": "0xa411977dd24F1547065C6630E468a43275cB4d7f",
    "contractAddress": "0xb7690afD76081A688C0C022FD31393dE657448D3",
    "transactionIndex": 1,
    "gasUsed": "3953719",
    "logsBloom": "0x
    "blockHash": "0x330e08b3902967377bd98a558a0bbea651c84a6402d85a12f54c5f53b1d019c0",
    "transactionHash": "0x2a300040e2b82ad5c641b4b4a91c713c28bad9f831360f7b845a1e8a010c8125",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 14698147,
        "transactionHash": "0x2a300040e2b82ad5c641b4b4a91c713c28bad9f831360f7b845a1e8a010c8125",
        "address": "0xb7690afD76081A688C0C022FD31393dE657448D3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a411977dd24f1547065c6630e468a43275cb4d7f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x330e08b3902967377bd98a558a0bbea651c84a6402d85a12f54c5f53b1d019c0"
      }
    ],
    "blockNumber": 14698147,
    "cumulativeGasUsed": "4024466",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC249632c2D40b9001FE907806902f63038B737Ab",
    "0xbE406F0189A0B4cf3A05C286473D23791Dd44Cc6",
    "0x5425890298aed601595a70ab815c96711a31bc65",
    "0x0fC1103927AF27aF808D03135214718bCEDbE9ad",
    "0xd00ae08403B9bbb9124bB305C09058E32C39A48c"
  ],
  "numDeployments": 2,
  "solcInputHash": "75fff084e77c55481753c5ef7f1bce4e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_circleBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyForecalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"SwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"SwapPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"tradeData\",\"type\":\"bytes\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chain_\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"addSibling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"amountPostFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circleBridge\",\"outputs\":[{\"internalType\":\"contract ICircleBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"destinationDomains\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"forecaller\",\"type\":\"address\"}],\"name\":\"forecall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forecaller\",\"type\":\"address\"}],\"name\":\"forecallWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"tradeData1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"tradeData2\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fallbackRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"inputPos\",\"type\":\"uint16\"}],\"name\":\"nativeTradeSendTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"siblings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CircleSwapExecutable.sol\":\"CircleSwapExecutable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarForecallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IAxelarGateway } from './IAxelarGateway.sol';\\nimport { IERC20 } from './IERC20.sol';\\n\\nabstract contract IAxelarForecallable {\\n    error NotApprovedByGateway();\\n    error AlreadyForecalled();\\n    error TransferFailed();\\n\\n    IAxelarGateway public gateway;\\n    mapping(bytes32 => address) forecallers;\\n\\n    constructor(address gatewayAddress) {\\n        gateway = IAxelarGateway(gatewayAddress);\\n    }\\n\\n    function forecall(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        address forecaller\\n    ) external {\\n        _checkForecall(sourceChain, sourceAddress, payload, forecaller);\\n        if (forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))] != address(0)) revert AlreadyForecalled();\\n        forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))] = forecaller;\\n        _execute(sourceChain, sourceAddress, payload);\\n    }\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash)) revert NotApprovedByGateway();\\n        address forecaller = forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))];\\n        if (forecaller != address(0)) {\\n            forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))] = address(0);\\n        } else {\\n            _execute(sourceChain, sourceAddress, payload);\\n        }\\n    }\\n\\n    function forecallWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount,\\n        address forecaller\\n    ) external {\\n        address token = gateway.tokenAddresses(tokenSymbol);\\n        uint256 amountPost = amountPostFee(amount, payload);\\n        _safeTransferFrom(token, msg.sender, amountPost);\\n        _checkForecallWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount, forecaller);\\n        if (forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))] != address(0))\\n            revert AlreadyForecalled();\\n        forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))] = forecaller;\\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amountPost);\\n    }\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n        if (!gateway.validateContractCallAndMint(commandId, sourceChain, sourceAddress, payloadHash, tokenSymbol, amount))\\n            revert NotApprovedByGateway();\\n        address forecaller = forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))];\\n        if (forecaller != address(0)) {\\n            forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))] = address(0);\\n            address token = gateway.tokenAddresses(tokenSymbol);\\n            _safeTransfer(token, forecaller, amount);\\n        } else {\\n            _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\\n        }\\n    }\\n\\n    function _execute(\\n        string memory sourceChain,\\n        string memory sourceAddress,\\n        bytes calldata payload\\n    ) internal virtual {}\\n\\n    function _executeWithToken(\\n        string memory sourceChain,\\n        string memory sourceAddress,\\n        bytes calldata payload,\\n        string memory tokenSymbol,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    // Override this to keep a fee.\\n    function amountPostFee(\\n        uint256 amount,\\n        bytes calldata /*payload*/\\n    ) public virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    // Override this and revert if you want to only allow certain people/calls to be able to forecall.\\n    function _checkForecall(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        address forecaller\\n    ) internal virtual {}\\n\\n    // Override this and revert if you want to only allow certain people/calls to be able to forecall.\\n    function _checkForecallWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount,\\n        address forecaller\\n    ) internal virtual {}\\n\\n    function _safeTransfer(\\n        address tokenAddress,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory returnData) = tokenAddress.call(abi.encodeWithSelector(IERC20.transfer.selector, receiver, amount));\\n        bool transferred = success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n\\n        if (!transferred || tokenAddress.code.length == 0) revert TransferFailed();\\n    }\\n\\n    function _safeTransferFrom(\\n        address tokenAddress,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory returnData) = tokenAddress.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, address(this), amount)\\n        );\\n        bool transferred = success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n\\n        if (!transferred || tokenAddress.code.length == 0) revert TransferFailed();\\n    }\\n}\\n\",\"keccak256\":\"0x2031d2c2ff7120c6403ab2af4e9100b415a45101d6ae2664ebd184a266bd458e\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGasService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IUpgradable.sol';\\n\\n// This should be owned by the microservice that is paying for gas.\\ninterface IAxelarGasService is IUpgradable {\\n    error NothingReceived();\\n    error TransferFailed();\\n    error InvalidAddress();\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(bytes32 indexed txHash, uint256 indexed logIndex, address gasToken, uint256 gasFeeAmount, address refundAddress);\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function collectFees(address payable receiver, address[] calldata tokens) external;\\n\\n    function refund(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5e8b391cc6c2f528ff0eaab218bc1395329ab959872cd590d682be2321cfb76\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error NotProxy();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(address indexed sender, string destinationChain, string destinationAddress, string symbol, uint256 amount);\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    function adminEpoch() external view returns (uint256);\\n\\n    function adminThreshold(uint256 epoch) external view returns (uint256);\\n\\n    function admins(uint256 epoch) external view returns (address[] memory);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\",\"keccak256\":\"0x810f2eab60267046fc188b8357b73d81d7b7959959781cb8b90b7957d162b05e\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    error InvalidAccount();\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x9e0821bdcdd893b070fab69ec20053ff99d96bc25054c349a9112036a23d9e5c\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// General interface for upgradable contracts\\ninterface IUpgradable {\\n    error NotOwner();\\n    error InvalidOwner();\\n    error InvalidCodeHash();\\n    error InvalidImplementation();\\n    error SetupFailed();\\n    error NotProxy();\\n\\n    event Upgraded(address indexed newImplementation);\\n    event OwnershipTransferred(address indexed newOwner);\\n\\n    // Get current owner\\n    function owner() external view returns (address);\\n\\n    function contractId() external pure returns (bytes32);\\n\\n    function implementation() external view returns (address);\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata params\\n    ) external;\\n\\n    function setup(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x27d750d5bce09e171601c0cc91325b8e2dda72732d6b188d185dd20554804f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CircleSwapExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IAxelarForecallable} from \\\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarForecallable.sol\\\";\\nimport {IAxelarGasService} from \\\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGasService.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ICircleBridge} from \\\"./ICircleBridge.sol\\\";\\nimport \\\"./StringAddressUtils.sol\\\";\\n\\n// Only support a native token for now.\\ncontract CircleSwapExecutable is IAxelarForecallable, Ownable {\\n    error InvalidTrade();\\n    error InsufficientInput();\\n    error TradeFailed();\\n\\n    event SwapSuccess(bytes32 indexed traceId, uint256 amount, bytes tradeData);\\n\\n    event SwapFailed(\\n        bytes32 indexed traceId,\\n        uint256 amount,\\n        address refundAddress\\n    );\\n\\n    event SwapPending(\\n        bytes32 indexed traceId,\\n        bytes32 indexed payloadHash,\\n        uint256 amount,\\n        string destinationChain,\\n        bytes payload\\n    );\\n\\n    IAxelarGasService immutable gasReceiver;\\n    IERC20 public usdc;\\n    address public wrappedNativeToken;\\n    ICircleBridge public circleBridge;\\n\\n    // destination chain name => destination contract address\\n    mapping(string => address) public siblings;\\n\\n    // destination chain name to destination chain id\\n    mapping(string => uint32) public destinationDomains;\\n\\n    constructor(\\n        address _gateway,\\n        address _gasReceiver,\\n        address _usdc,\\n        address _circleBridge,\\n        address _wrappedNativeAddress\\n    ) IAxelarForecallable(_gateway) Ownable() {\\n        gasReceiver = IAxelarGasService(_gasReceiver);\\n        usdc = IERC20(_usdc);\\n        circleBridge = ICircleBridge(_circleBridge);\\n        wrappedNativeToken = _wrappedNativeAddress;\\n    }\\n\\n    // Prevent accidentally call, which leds to nobody is able to call `addSibling`.\\n    function renounceOwnership() public override {}\\n\\n    modifier onlyValidChain(string memory _destinationChain) {\\n        require(\\n            siblings[_destinationChain] != address(0),\\n            \\\"CircleSwapExecutable: invalid destination chain\\\"\\n        );\\n        _;\\n    }\\n\\n    //Use this to register additional siblings. Siblings are used to send headers to as well as to know who to trust for headers.\\n    function addSibling(\\n        string memory chain_,\\n        uint32 domain,\\n        address address_\\n    ) external onlyOwner {\\n        siblings[chain_] = address_;\\n        destinationDomains[chain_] = domain;\\n    }\\n\\n    function _tradeSrc(bytes memory tradeData)\\n        internal\\n        returns (bool success, uint256 amount)\\n    {\\n        (\\n            address tokenIn,\\n            uint256 amountIn,\\n            address router,\\n            bytes memory data\\n        ) = abi.decode(tradeData, (address, uint256, address, bytes));\\n        if (tokenIn == address(0)) {\\n            (success, ) = router.call{value: amountIn}(data);\\n        } else {\\n            SafeERC20.safeTransferFrom(\\n                IERC20(tokenIn),\\n                msg.sender,\\n                address(this),\\n                amountIn\\n            );\\n            IERC20(tokenIn).approve(router, amountIn);\\n            (success, ) = router.call(data);\\n        }\\n\\n        return (success, amountIn);\\n    }\\n\\n    function _tradeDest(bytes memory tradeData, uint256 receiveAmount)\\n        internal\\n        returns (bool success)\\n    {\\n        (address tokenIn, , address router, bytes memory data) = abi.decode(\\n            tradeData,\\n            (address, uint256, address, bytes)\\n        );\\n        IERC20(tokenIn).approve(router, receiveAmount);\\n        (success, ) = router.call(data);\\n    }\\n\\n    function _nativeSendTrade(\\n        string memory destinationChain,\\n        bytes memory tradeData,\\n        uint256 amount,\\n        uint256 gasAmount,\\n        bytes32 traceId,\\n        address fallbackRecipient,\\n        uint16 inputPos\\n    ) private {\\n        bytes memory payload = abi.encode(\\n            tradeData,\\n            amount,\\n            traceId,\\n            fallbackRecipient,\\n            inputPos\\n        );\\n        gasReceiver.payNativeGasForContractCall{value: gasAmount}(\\n            address(this),\\n            destinationChain,\\n            AddressToString.toString(this.siblings(destinationChain)),\\n            payload,\\n            msg.sender\\n        );\\n        gateway.callContract(\\n            destinationChain,\\n            AddressToString.toString(this.siblings(destinationChain)),\\n            payload\\n        );\\n        emit SwapPending(\\n            traceId,\\n            keccak256(payload),\\n            amount,\\n            destinationChain,\\n            payload\\n        );\\n    }\\n\\n    function tokenBalance(address tokenAddress)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        return IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    function _trade(bytes memory tradeData1)\\n        private\\n        returns (uint256 amount, uint256 burnAmount)\\n    {\\n        uint256 preTradeBalance = tokenBalance(address(usdc));\\n\\n        (bool success, uint256 _amount) = _tradeSrc(tradeData1);\\n        require(success, \\\"TRADE_FAILED\\\");\\n\\n        uint256 _burnAmount = tokenBalance(address(usdc)) - preTradeBalance;\\n\\n        return (_amount, _burnAmount);\\n    }\\n\\n    function nativeTradeSendTrade(\\n        string memory destinationChain,\\n        bytes memory tradeData1,\\n        bytes memory tradeData2,\\n        bytes32 traceId,\\n        address fallbackRecipient,\\n        uint16 inputPos\\n    ) external payable onlyValidChain(destinationChain) {\\n        (uint256 amount, uint256 burnAmount) = _trade(tradeData1);\\n        IERC20(address(usdc)).approve(address(circleBridge), burnAmount);\\n\\n        circleBridge.depositForBurn(\\n            burnAmount,\\n            this.destinationDomains(destinationChain),\\n            bytes32(uint256(uint160(this.siblings(destinationChain)))),\\n            address(usdc)\\n        );\\n\\n        _nativeSendTrade(\\n            destinationChain,\\n            tradeData2,\\n            burnAmount, // total burned amount (usdc)\\n            msg.value - amount, // total sent eth - eth for trade\\n            traceId,\\n            fallbackRecipient,\\n            inputPos\\n        );\\n    }\\n\\n    function _refund(\\n        bytes32 traceId,\\n        uint256 amount,\\n        address recipient\\n    ) internal returns (bool) {\\n        _giveToken(amount, recipient);\\n        emit SwapFailed(traceId, amount, recipient);\\n        return false;\\n    }\\n\\n    function _receiveTrade(\\n        uint256 amount,\\n        bytes memory tradeData,\\n        bytes32 traceId,\\n        address fallbackRecipient,\\n        uint16 inputPos\\n    ) internal returns (bool) {\\n        address tokenAddressByPayload = abi.decode(tradeData, (address));\\n        if (tokenAddressByPayload != address(usdc))\\n            return _refund(traceId, amount, fallbackRecipient);\\n\\n        //This hack puts the amount in the correct position.\\n        assembly {\\n            mstore(add(tradeData, inputPos), amount)\\n        }\\n\\n        if (!_tradeDest(tradeData, amount))\\n            return _refund(traceId, amount, fallbackRecipient);\\n\\n        emit SwapSuccess(traceId, amount, tradeData);\\n        return true;\\n    }\\n\\n    function _giveToken(uint256 amount, address destination) internal {\\n        SafeERC20.safeTransfer(IERC20(address(usdc)), destination, amount);\\n    }\\n\\n    function _execute(\\n        string memory, /*sourceChain*/\\n        string memory, /*sourceAddress*/\\n        bytes calldata payload\\n    ) internal override {\\n        (\\n            bytes memory data,\\n            uint256 amount,\\n            bytes32 traceId,\\n            address fallbackRecipient,\\n            uint16 inputPos\\n        ) = abi.decode(payload, (bytes, uint256, bytes32, address, uint16));\\n        _receiveTrade(amount, data, traceId, fallbackRecipient, inputPos);\\n    }\\n}\\n\",\"keccak256\":\"0x0a304047eed2d18f33955b8554b1abc01ba1b8c08252dc4cf65905ac05bc65a2\",\"license\":\"MIT\"},\"contracts/ICircleBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\ninterface ICircleBridge {\\n    /**\\n    * @param _amount amount of tokens to burn\\n    * @param _destinationDomain destination domain\\n    * @param _mintRecipient address of mint recipient on destination domain\\n    * @param _burnToken address of contract to burn deposited tokens, on local\\n    domain\\n    * @return _nonce uint64, unique nonce for each burn\\n    */\\n    function depositForBurn(\\n        uint256 _amount,\\n        uint32 _destinationDomain,\\n        bytes32 _mintRecipient,\\n        address _burnToken\\n    ) external returns (uint64 _nonce);\\n}\\n\",\"keccak256\":\"0x0e4d0bfec2a7aed40e50659e06363066736255e6b5db91da562262024f9bbadc\",\"license\":\"UNLICENSED\"},\"contracts/StringAddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nlibrary StringToAddress {\\n    function toAddress(string memory _a) internal pure returns (address) {\\n        bytes memory tmp = bytes(_a);\\n        if (tmp.length != 42) return address(0);\\n        uint160 iaddr = 0;\\n        uint8 b;\\n        for (uint256 i = 2; i < 42; i++) {\\n            b = uint8(tmp[i]);\\n            if ((b >= 97) && (b <= 102)) b -= 87;\\n            else if ((b >= 65) && (b <= 70)) b -= 55;\\n            else if ((b >= 48) && (b <= 57)) b -= 48;\\n            else return address(0);\\n            iaddr |= uint160(uint256(b) << ((41 - i) << 2));\\n        }\\n        return address(iaddr);\\n    }\\n}\\n\\nlibrary AddressToString {\\n    function toString(address a) internal pure returns (string memory) {\\n        bytes memory data = abi.encodePacked(a);\\n        bytes memory characters = \\\"0123456789abcdef\\\";\\n        bytes memory byteString = new bytes(2 + data.length * 2);\\n\\n        byteString[0] = \\\"0\\\";\\n        byteString[1] = \\\"x\\\";\\n\\n        for (uint256 i; i < data.length; ++i) {\\n            byteString[2 + i * 2] = characters[uint256(uint8(data[i] >> 4))];\\n            byteString[3 + i * 2] = characters[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(byteString);\\n    }\\n}\\n\",\"keccak256\":\"0x792e71d9ab1dc5c755e4d42275ae0a1d0523c2c8b74094407b028f95cb578861\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620047db380380620047db8339818101604052810190620000379190620002d3565b84806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620000996200008d6200019b60201b60201c565b620001a360201b60201c565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506200035b565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200029b826200026e565b9050919050565b620002ad816200028e565b8114620002b957600080fd5b50565b600081519050620002cd81620002a2565b92915050565b600080600080600060a08688031215620002f257620002f162000269565b5b60006200030288828901620002bc565b95505060206200031588828901620002bc565b94505060406200032888828901620002bc565b93505060606200033b88828901620002bc565b92505060806200034e88828901620002bc565b9150509295509295909350565b6080516144646200037760003960006118d601526144646000f3fe6080604052600436106100f35760003560e01c8063713a98761161008a578063bb288a0311610059578063bb288a0314610318578063daa0c91714610341578063e7fb058b1461035d578063f2fde38b14610386576100f3565b8063713a98761461025c578063715018a6146102995780638da5cb5b146102b0578063a7798b69146102db576100f3565b80633ca2fd8e116100c65780633ca2fd8e146101a25780633da2a4b5146101df5780633e413bee146102085780634916065814610233576100f3565b806301a67b6b146100f8578063116191b61461012357806317fcb39b1461014e5780631a98b2e014610179575b600080fd5b34801561010457600080fd5b5061010d6103af565b60405161011a91906129ec565b60405180910390f35b34801561012f57600080fd5b506101386103d5565b6040516101459190612a28565b60405180910390f35b34801561015a57600080fd5b506101636103f9565b6040516101709190612a64565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b9190612bba565b61041f565b005b3480156101ae57600080fd5b506101c960048036038101906101c49190612cca565b610801565b6040516101d69190612d39565b60405180910390f35b3480156101eb57600080fd5b5061020660048036038101906102019190612efd565b61080d565b005b34801561021457600080fd5b5061021d6108b4565b60405161022a9190612f8d565b60405180910390f35b34801561023f57600080fd5b5061025a60048036038101906102559190612fa8565b6108da565b005b34801561026857600080fd5b50610283600480360381019061027e9190613071565b610ba5565b60405161029091906130c9565b60405180910390f35b3480156102a557600080fd5b506102ae610bde565b005b3480156102bc57600080fd5b506102c5610be0565b6040516102d29190612a64565b60405180910390f35b3480156102e757600080fd5b5061030260048036038101906102fd9190613071565b610c0a565b60405161030f9190612a64565b60405180910390f35b34801561032457600080fd5b5061033f600480360381019061033a91906130e4565b610c53565b005b61035b60048036038101906103569190613288565b610e4a565b005b34801561036957600080fd5b50610384600480360381019061037f9190613369565b6111ff565b005b34801561039257600080fd5b506103ad60048036038101906103a89190613479565b61151a565b005b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600085856040516104319291906134d6565b6040518091039020905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b81526004016104a49998979695949392919061353c565b602060405180830381600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f691906135f0565b61052c576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008c8c8c8c8c8c8c8c8c6040516020016105539998979695949392919061365b565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610718576000600160008d8d8d8d8d8d8d8d8d6040516020016105f59998979695949392919061365b565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663935b13f687876040518363ffffffff1660e01b81526004016106b59291906136d2565b60206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610705919061370b565b905061071281838661159e565b506107f3565b6107f28b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505088611714565b5b505050505050505050505050565b60008390509392505050565b61081561171c565b8060068460405161082691906137b2565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160078460405161088391906137b2565b908152602001604051809103902060006101000a81548163ffffffff021916908363ffffffff160217905550505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082826040516108ec9291906134d6565b6040518091039020905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b8152600401610959969594939291906137c9565b602060405180830381600087803b15801561097357600080fd5b505af1158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab91906135f0565b6109e1576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060016000898989898989604051602001610a0296959493929190613820565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b05576000600160008a8a8a8a8a8a604051602001610a9e96959493929190613820565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b9a565b610b9988888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050868661179a565b5b505050505050505050565b6007818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900463ffffffff1681565b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6006818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c62878787878787876117d4565b600073ffffffffffffffffffffffffffffffffffffffff1660016000898989898989604051602001610c9996959493929190613820565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d2b576040517f35b7d55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000898989898989604051602001610d4b96959493929190613820565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e4187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050858561179a565b50505050505050565b85600073ffffffffffffffffffffffffffffffffffffffff16600682604051610e7391906137b2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610ef9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef0906138e4565b60405180910390fd5b600080610f05886117dd565b91509150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610f88929190613904565b602060405180830381600087803b158015610fa257600080fd5b505af1158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda91906135f0565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fd3504e823073ffffffffffffffffffffffffffffffffffffffff1663713a98768d6040518263ffffffff1660e01b81526004016110539190613966565b60206040518083038186803b15801561106b57600080fd5b505afa15801561107f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a3919061399d565b3073ffffffffffffffffffffffffffffffffffffffff1663a7798b698e6040518263ffffffff1660e01b81526004016110dc9190613966565b60206040518083038186803b1580156110f457600080fd5b505afa158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c919061370b565b73ffffffffffffffffffffffffffffffffffffffff1660001b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b815260040161118794939291906139ca565b602060405180830381600087803b1580156111a157600080fd5b505af11580156111b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d99190613a4f565b506111f489888385346111ec9190613aab565b8a8a8a6118a8565b505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663935b13f686866040518363ffffffff1660e01b815260040161125d9291906136d2565b60206040518083038186803b15801561127557600080fd5b505afa158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad919061370b565b905060006112bc848989610801565b90506112c9823383611b65565b6112db8c8c8c8c8c8c8c8c8c8c611cdd565b600073ffffffffffffffffffffffffffffffffffffffff16600160008e8e8e8e8e8e8e8e8e6040516020016113189998979695949392919061365b565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113aa576040517f35b7d55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600160008e8e8e8e8e8e8e8e8e6040516020016113d09998979695949392919061365b565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061150c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508a8a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086611714565b505050505050505050505050565b61152261171c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158990613b51565b60405180910390fd5b61159b81611ce9565b50565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016115d3929190613904565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161163d9190613bad565b6000604051808303816000865af19150503d806000811461167a576040519150601f19603f3d011682016040523d82523d6000602084013e61167f565b606091505b509150915060008280156116af57506000825114806116ae5750818060200190518101906116ad91906135f0565b5b5b90508015806116d5575060008673ffffffffffffffffffffffffffffffffffffffff163b145b1561170c576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b505050505050565b611724611daf565b73ffffffffffffffffffffffffffffffffffffffff16611742610be0565b73ffffffffffffffffffffffffffffffffffffffff1614611798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178f90613c10565b60405180910390fd5b565b600080600080600086868101906117b19190613c6e565b945094509450945094506117c88486858585611db7565b50505050505050505050565b50505050505050565b600080600061180d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611ea7565b905060008061181b86611f39565b915091508161185f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185690613d51565b60405180910390fd5b60008361188d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611ea7565b6118979190613aab565b905081819550955050505050915091565b600086868585856040516020016118c3959493929190613db9565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c93e3bb86308b6119a43073ffffffffffffffffffffffffffffffffffffffff1663a7798b698f6040518263ffffffff1660e01b815260040161194f9190613966565b60206040518083038186803b15801561196757600080fd5b505afa15801561197b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199f919061370b565b61211d565b86336040518763ffffffff1660e01b81526004016119c6959493929190613e13565b6000604051808303818588803b1580156119df57600080fd5b505af11580156119f3573d6000803e3d6000fd5b505050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c92115f89611ac63073ffffffffffffffffffffffffffffffffffffffff1663a7798b698d6040518263ffffffff1660e01b8152600401611a719190613966565b60206040518083038186803b158015611a8957600080fd5b505afa158015611a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac1919061370b565b61211d565b846040518463ffffffff1660e01b8152600401611ae593929190613e7b565b600060405180830381600087803b158015611aff57600080fd5b505af1158015611b13573d6000803e3d6000fd5b505050508080519060200120847f603f384676075b3ec165d26daed675db50dfd83d03f3d12e2eecad1a52da8221888b85604051611b5393929190613ec7565b60405180910390a35050505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b853086604051602401611b9c93929190613f0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611c069190613bad565b6000604051808303816000865af19150503d8060008114611c43576040519150601f19603f3d011682016040523d82523d6000602084013e611c48565b606091505b50915091506000828015611c785750600082511480611c77575081806020019051810190611c7691906135f0565b5b5b9050801580611c9e575060008673ffffffffffffffffffffffffffffffffffffffff163b145b15611cd5576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b50505050505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008085806020019051810190611dce9190613f58565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611e3857611e3085888661243a565b915050611e9e565b8683870152611e47868861248b565b611e5e57611e5685888661243a565b915050611e9e565b847f2eee7242b494decec975364a3a68cc2983c8c343618698e44ca690103af761758888604051611e90929190613f85565b60405180910390a260019150505b95945050505050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ee29190612a64565b60206040518083038186803b158015611efa57600080fd5b505afa158015611f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f329190613fca565b9050919050565b60008060008060008086806020019051810190611f569190614067565b9350935093509350600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612006578173ffffffffffffffffffffffffffffffffffffffff168382604051611fb99190613bad565b60006040518083038185875af1925050503d8060008114611ff6576040519150601f19603f3d011682016040523d82523d6000602084013e611ffb565b606091505b50508096505061210e565b612012843330866125b0565b8373ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b815260040161204d929190613904565b602060405180830381600087803b15801561206757600080fd5b505af115801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f91906135f0565b508173ffffffffffffffffffffffffffffffffffffffff16816040516120c59190613bad565b6000604051808303816000865af19150503d8060008114612102576040519150601f19603f3d011682016040523d82523d6000602084013e612107565b606091505b5050809650505b85839550955050505050915091565b60606000826040516020016121329190614132565b604051602081830303815290604052905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060006002835161218d919061414d565b600261219991906141a7565b67ffffffffffffffff8111156121b2576121b1612d6a565b5b6040519080825280601f01601f1916602001820160405280156121e45781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061221c5761221b6141fd565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122805761227f6141fd565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b835181101561242e578260048583815181106122d1576122d06141fd565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110612317576123166141fd565b5b602001015160f81c60f81b82600283612330919061414d565b600261233c91906141a7565b8151811061234d5761234c6141fd565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b858381518110612395576123946141fd565b5b602001015160f81c60f81b1660f81c60ff16815181106123b8576123b76141fd565b5b602001015160f81c60f81b826002836123d1919061414d565b60036123dd91906141a7565b815181106123ee576123ed6141fd565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806124279061422c565b90506122b2565b50809350505050919050565b60006124468383612639565b837f558c0ee8c786238cf77a23150b8f030420c53c82aa0488213ace44ee1cfc92f48484604051612478929190614275565b60405180910390a2600090509392505050565b600080600080858060200190518101906124a59190614067565b935093505092508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383876040518363ffffffff1660e01b81526004016124e7929190613904565b602060405180830381600087803b15801561250157600080fd5b505af1158015612515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253991906135f0565b508173ffffffffffffffffffffffffffffffffffffffff168160405161255f9190613bad565b6000604051808303816000865af19150503d806000811461259c576040519150601f19603f3d011682016040523d82523d6000602084013e6125a1565b606091505b50508094505050505092915050565b612633846323b872dd60e01b8585856040516024016125d193929190613f0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061266a565b50505050565b612666600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168284612731565b5050565b60006126cc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127b79092919063ffffffff16565b905060008151111561272c57808060200190518101906126ec91906135f0565b61272b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272290614310565b60405180910390fd5b5b505050565b6127b28363a9059cbb60e01b8484604051602401612750929190613904565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061266a565b505050565b60606127c684846000856127cf565b90509392505050565b606082471015612814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280b906143a2565b60405180910390fd5b61281d856128e3565b61285c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128539061440e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516128859190613bad565b60006040518083038185875af1925050503d80600081146128c2576040519150601f19603f3d011682016040523d82523d6000602084013e6128c7565b606091505b50915091506128d7828286612906565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561291657829050612966565b6000835111156129295782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295d9190613966565b60405180910390fd5b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006129b26129ad6129a88461296d565b61298d565b61296d565b9050919050565b60006129c482612997565b9050919050565b60006129d6826129b9565b9050919050565b6129e6816129cb565b82525050565b6000602082019050612a0160008301846129dd565b92915050565b6000612a12826129b9565b9050919050565b612a2281612a07565b82525050565b6000602082019050612a3d6000830184612a19565b92915050565b6000612a4e8261296d565b9050919050565b612a5e81612a43565b82525050565b6000602082019050612a796000830184612a55565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612aa681612a93565b8114612ab157600080fd5b50565b600081359050612ac381612a9d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612aee57612aed612ac9565b5b8235905067ffffffffffffffff811115612b0b57612b0a612ace565b5b602083019150836001820283011115612b2757612b26612ad3565b5b9250929050565b60008083601f840112612b4457612b43612ac9565b5b8235905067ffffffffffffffff811115612b6157612b60612ace565b5b602083019150836001820283011115612b7d57612b7c612ad3565b5b9250929050565b6000819050919050565b612b9781612b84565b8114612ba257600080fd5b50565b600081359050612bb481612b8e565b92915050565b60008060008060008060008060008060c08b8d031215612bdd57612bdc612a89565b5b6000612beb8d828e01612ab4565b9a505060208b013567ffffffffffffffff811115612c0c57612c0b612a8e565b5b612c188d828e01612ad8565b995099505060408b013567ffffffffffffffff811115612c3b57612c3a612a8e565b5b612c478d828e01612ad8565b975097505060608b013567ffffffffffffffff811115612c6a57612c69612a8e565b5b612c768d828e01612b2e565b955095505060808b013567ffffffffffffffff811115612c9957612c98612a8e565b5b612ca58d828e01612ad8565b935093505060a0612cb88d828e01612ba5565b9150509295989b9194979a5092959850565b600080600060408486031215612ce357612ce2612a89565b5b6000612cf186828701612ba5565b935050602084013567ffffffffffffffff811115612d1257612d11612a8e565b5b612d1e86828701612b2e565b92509250509250925092565b612d3381612b84565b82525050565b6000602082019050612d4e6000830184612d2a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612da282612d59565b810181811067ffffffffffffffff82111715612dc157612dc0612d6a565b5b80604052505050565b6000612dd4612a7f565b9050612de08282612d99565b919050565b600067ffffffffffffffff821115612e0057612dff612d6a565b5b612e0982612d59565b9050602081019050919050565b82818337600083830152505050565b6000612e38612e3384612de5565b612dca565b905082815260208101848484011115612e5457612e53612d54565b5b612e5f848285612e16565b509392505050565b600082601f830112612e7c57612e7b612ac9565b5b8135612e8c848260208601612e25565b91505092915050565b600063ffffffff82169050919050565b612eae81612e95565b8114612eb957600080fd5b50565b600081359050612ecb81612ea5565b92915050565b612eda81612a43565b8114612ee557600080fd5b50565b600081359050612ef781612ed1565b92915050565b600080600060608486031215612f1657612f15612a89565b5b600084013567ffffffffffffffff811115612f3457612f33612a8e565b5b612f4086828701612e67565b9350506020612f5186828701612ebc565b9250506040612f6286828701612ee8565b9150509250925092565b6000612f77826129b9565b9050919050565b612f8781612f6c565b82525050565b6000602082019050612fa26000830184612f7e565b92915050565b60008060008060008060006080888a031215612fc757612fc6612a89565b5b6000612fd58a828b01612ab4565b975050602088013567ffffffffffffffff811115612ff657612ff5612a8e565b5b6130028a828b01612ad8565b9650965050604088013567ffffffffffffffff81111561302557613024612a8e565b5b6130318a828b01612ad8565b9450945050606088013567ffffffffffffffff81111561305457613053612a8e565b5b6130608a828b01612b2e565b925092505092959891949750929550565b60006020828403121561308757613086612a89565b5b600082013567ffffffffffffffff8111156130a5576130a4612a8e565b5b6130b184828501612e67565b91505092915050565b6130c381612e95565b82525050565b60006020820190506130de60008301846130ba565b92915050565b60008060008060008060006080888a03121561310357613102612a89565b5b600088013567ffffffffffffffff81111561312157613120612a8e565b5b61312d8a828b01612ad8565b9750975050602088013567ffffffffffffffff8111156131505761314f612a8e565b5b61315c8a828b01612ad8565b9550955050604088013567ffffffffffffffff81111561317f5761317e612a8e565b5b61318b8a828b01612b2e565b9350935050606061319e8a828b01612ee8565b91505092959891949750929550565b600067ffffffffffffffff8211156131c8576131c7612d6a565b5b6131d182612d59565b9050602081019050919050565b60006131f16131ec846131ad565b612dca565b90508281526020810184848401111561320d5761320c612d54565b5b613218848285612e16565b509392505050565b600082601f83011261323557613234612ac9565b5b81356132458482602086016131de565b91505092915050565b600061ffff82169050919050565b6132658161324e565b811461327057600080fd5b50565b6000813590506132828161325c565b92915050565b60008060008060008060c087890312156132a5576132a4612a89565b5b600087013567ffffffffffffffff8111156132c3576132c2612a8e565b5b6132cf89828a01612e67565b965050602087013567ffffffffffffffff8111156132f0576132ef612a8e565b5b6132fc89828a01613220565b955050604087013567ffffffffffffffff81111561331d5761331c612a8e565b5b61332989828a01613220565b945050606061333a89828a01612ab4565b935050608061334b89828a01612ee8565b92505060a061335c89828a01613273565b9150509295509295509295565b60008060008060008060008060008060c08b8d03121561338c5761338b612a89565b5b60008b013567ffffffffffffffff8111156133aa576133a9612a8e565b5b6133b68d828e01612ad8565b9a509a505060208b013567ffffffffffffffff8111156133d9576133d8612a8e565b5b6133e58d828e01612ad8565b985098505060408b013567ffffffffffffffff81111561340857613407612a8e565b5b6134148d828e01612b2e565b965096505060608b013567ffffffffffffffff81111561343757613436612a8e565b5b6134438d828e01612ad8565b945094505060806134568d828e01612ba5565b92505060a06134678d828e01612ee8565b9150509295989b9194979a5092959850565b60006020828403121561348f5761348e612a89565b5b600061349d84828501612ee8565b91505092915050565b600081905092915050565b60006134bd83856134a6565b93506134ca838584612e16565b82840190509392505050565b60006134e38284866134b1565b91508190509392505050565b6134f881612a93565b82525050565b600082825260208201905092915050565b600061351b83856134fe565b9350613528838584612e16565b61353183612d59565b840190509392505050565b600060c082019050613551600083018c6134ef565b8181036020830152613564818a8c61350f565b9050818103604083015261357981888a61350f565b905061358860608301876134ef565b818103608083015261359b81858761350f565b90506135aa60a0830184612d2a565b9a9950505050505050505050565b60008115159050919050565b6135cd816135b8565b81146135d857600080fd5b50565b6000815190506135ea816135c4565b92915050565b60006020828403121561360657613605612a89565b5b6000613614848285016135db565b91505092915050565b600082825260208201905092915050565b600061363a838561361d565b9350613647838584612e16565b61365083612d59565b840190509392505050565b600060a0820190508181036000830152613676818b8d61350f565b9050818103602083015261368b81898b61350f565b905081810360408301526136a081878961362e565b905081810360608301526136b581858761350f565b90506136c46080830184612d2a565b9a9950505050505050505050565b600060208201905081810360008301526136ed81848661350f565b90509392505050565b60008151905061370581612ed1565b92915050565b60006020828403121561372157613720612a89565b5b600061372f848285016136f6565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561376c578082015181840152602081019050613751565b8381111561377b576000848401525b50505050565b600061378c82613738565b6137968185613743565b93506137a681856020860161374e565b80840191505092915050565b60006137be8284613781565b915081905092915050565b60006080820190506137de60008301896134ef565b81810360208301526137f181878961350f565b9050818103604083015261380681858761350f565b905061381560608301846134ef565b979650505050505050565b6000606082019050818103600083015261383b81888a61350f565b9050818103602083015261385081868861350f565b9050818103604083015261386581848661362e565b9050979650505050505050565b7f436972636c655377617045786563757461626c653a20696e76616c696420646560008201527f7374696e6174696f6e20636861696e0000000000000000000000000000000000602082015250565b60006138ce602f836134fe565b91506138d982613872565b604082019050919050565b600060208201905081810360008301526138fd816138c1565b9050919050565b60006040820190506139196000830185612a55565b6139266020830184612d2a565b9392505050565b600061393882613738565b61394281856134fe565b935061395281856020860161374e565b61395b81612d59565b840191505092915050565b60006020820190508181036000830152613980818461392d565b905092915050565b60008151905061399781612ea5565b92915050565b6000602082840312156139b3576139b2612a89565b5b60006139c184828501613988565b91505092915050565b60006080820190506139df6000830187612d2a565b6139ec60208301866130ba565b6139f960408301856134ef565b613a066060830184612a55565b95945050505050565b600067ffffffffffffffff82169050919050565b613a2c81613a0f565b8114613a3757600080fd5b50565b600081519050613a4981613a23565b92915050565b600060208284031215613a6557613a64612a89565b5b6000613a7384828501613a3a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ab682612b84565b9150613ac183612b84565b925082821015613ad457613ad3613a7c565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613b3b6026836134fe565b9150613b4682613adf565b604082019050919050565b60006020820190508181036000830152613b6a81613b2e565b9050919050565b600081519050919050565b6000613b8782613b71565b613b9181856134a6565b9350613ba181856020860161374e565b80840191505092915050565b6000613bb98284613b7c565b915081905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613bfa6020836134fe565b9150613c0582613bc4565b602082019050919050565b60006020820190508181036000830152613c2981613bed565b9050919050565b6000613c3b8261296d565b9050919050565b613c4b81613c30565b8114613c5657600080fd5b50565b600081359050613c6881613c42565b92915050565b600080600080600060a08688031215613c8a57613c89612a89565b5b600086013567ffffffffffffffff811115613ca857613ca7612a8e565b5b613cb488828901613220565b9550506020613cc588828901612ba5565b9450506040613cd688828901612ab4565b9350506060613ce788828901613c59565b9250506080613cf888828901613273565b9150509295509295909350565b7f54524144455f4641494c45440000000000000000000000000000000000000000600082015250565b6000613d3b600c836134fe565b9150613d4682613d05565b602082019050919050565b60006020820190508181036000830152613d6a81613d2e565b9050919050565b6000613d7c82613b71565b613d86818561361d565b9350613d9681856020860161374e565b613d9f81612d59565b840191505092915050565b613db38161324e565b82525050565b600060a0820190508181036000830152613dd38188613d71565b9050613de26020830187612d2a565b613def60408301866134ef565b613dfc6060830185612a55565b613e096080830184613daa565b9695505050505050565b600060a082019050613e286000830188612a55565b8181036020830152613e3a818761392d565b90508181036040830152613e4e818661392d565b90508181036060830152613e628185613d71565b9050613e716080830184612a55565b9695505050505050565b60006060820190508181036000830152613e95818661392d565b90508181036020830152613ea9818561392d565b90508181036040830152613ebd8184613d71565b9050949350505050565b6000606082019050613edc6000830186612d2a565b8181036020830152613eee818561392d565b90508181036040830152613f028184613d71565b9050949350505050565b6000606082019050613f216000830186612a55565b613f2e6020830185612a55565b613f3b6040830184612d2a565b949350505050565b600081519050613f5281613c42565b92915050565b600060208284031215613f6e57613f6d612a89565b5b6000613f7c84828501613f43565b91505092915050565b6000604082019050613f9a6000830185612d2a565b8181036020830152613fac8184613d71565b90509392505050565b600081519050613fc481612b8e565b92915050565b600060208284031215613fe057613fdf612a89565b5b6000613fee84828501613fb5565b91505092915050565b600061400a614005846131ad565b612dca565b90508281526020810184848401111561402657614025612d54565b5b61403184828561374e565b509392505050565b600082601f83011261404e5761404d612ac9565b5b815161405e848260208601613ff7565b91505092915050565b6000806000806080858703121561408157614080612a89565b5b600061408f87828801613f43565b94505060206140a087828801613fb5565b93505060406140b187828801613f43565b925050606085015167ffffffffffffffff8111156140d2576140d1612a8e565b5b6140de87828801614039565b91505092959194509250565b60008160601b9050919050565b6000614102826140ea565b9050919050565b6000614114826140f7565b9050919050565b61412c61412782612a43565b614109565b82525050565b600061413e828461411b565b60148201915081905092915050565b600061415882612b84565b915061416383612b84565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561419c5761419b613a7c565b5b828202905092915050565b60006141b282612b84565b91506141bd83612b84565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156141f2576141f1613a7c565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061423782612b84565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561426a57614269613a7c565b5b600182019050919050565b600060408201905061428a6000830185612d2a565b6142976020830184612a55565b9392505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006142fa602a836134fe565b91506143058261429e565b604082019050919050565b60006020820190508181036000830152614329816142ed565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061438c6026836134fe565b915061439782614330565b604082019050919050565b600060208201905081810360008301526143bb8161437f565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006143f8601d836134fe565b9150614403826143c2565b602082019050919050565b60006020820190508181036000830152614427816143eb565b905091905056fea26469706673582212206d24c0aa5297f455aabef04e0249ae343636b5d149685b5f5ec84ebfab86fdd964736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "gateway",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAxelarGateway)1097"
      },
      {
        "astId": 18,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "forecallers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1237,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2113,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "usdc",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1420"
      },
      {
        "astId": 2115,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2118,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "circleBridge",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICircleBridge)2736"
      },
      {
        "astId": 2122,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "siblings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 2126,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "destinationDomains",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAxelarGateway)1097": {
        "encoding": "inplace",
        "label": "contract IAxelarGateway",
        "numberOfBytes": "20"
      },
      "t_contract(ICircleBridge)2736": {
        "encoding": "inplace",
        "label": "contract ICircleBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1420": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_uint32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}