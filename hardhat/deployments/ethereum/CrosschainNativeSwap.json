{
  "address": "0x9163939d0C7fB3F74A176676b8826D73F6b01F20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_circleBridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyForecalled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedByGateway",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TradeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "refundAddress",
          "type": "address"
        }
      ],
      "name": "SwapFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "tradeData",
          "type": "bytes"
        }
      ],
      "name": "SwapSuccess",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "chain_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "addSibling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "amountPostFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circleBridge",
      "outputs": [
        {
          "internalType": "contract ICircleBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "circleDestinationDomains",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "executeWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "forecaller",
          "type": "address"
        }
      ],
      "name": "forecall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "forecaller",
          "type": "address"
        }
      ],
      "name": "forecallWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "contract IAxelarGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "srcTradeData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "destTradeData",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "fallbackRecipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "inputPos",
          "type": "uint16"
        }
      ],
      "name": "nativeTradeSendTrade",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "siblings",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xabb03c97c3f83d99d784d57e446079eeb6dfd821a7f9ae4f854b58eca82e5817",
  "receipt": {
    "to": null,
    "from": "0xa411977dd24F1547065C6630E468a43275cB4d7f",
    "contractAddress": "0x9163939d0C7fB3F74A176676b8826D73F6b01F20",
    "transactionIndex": 51,
    "gasUsed": "3906700",
    "logsBloom": "0x
    "blockHash": "0x725735de5b2708548c283db1f04c9249220b398b5979bd7bb7a78939741b01d3",
    "transactionHash": "0xabb03c97c3f83d99d784d57e446079eeb6dfd821a7f9ae4f854b58eca82e5817",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 7796823,
        "transactionHash": "0xabb03c97c3f83d99d784d57e446079eeb6dfd821a7f9ae4f854b58eca82e5817",
        "address": "0x9163939d0C7fB3F74A176676b8826D73F6b01F20",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a411977dd24f1547065c6630e468a43275cb4d7f"
        ],
        "data": "0x",
        "logIndex": 145,
        "blockHash": "0x725735de5b2708548c283db1f04c9249220b398b5979bd7bb7a78939741b01d3"
      }
    ],
    "blockNumber": 7796823,
    "cumulativeGasUsed": "15764873",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x07865c6e87b9f70255377e024ace6630c1eaa37f",
    "0xbE406F0189A0B4cf3A05C286473D23791Dd44Cc6",
    "0xe432150cce91c13a887f7D836923d5597adD8E31",
    "0xdAbec94B97F7b5FCA28f050cC8EeAc2Dc9920476"
  ],
  "numDeployments": 1,
  "solcInputHash": "e015e0e4e1fcb26c7b0424aa0a3c98ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_circleBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyForecalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"SwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"tradeData\",\"type\":\"bytes\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chain_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"addSibling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"amountPostFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circleBridge\",\"outputs\":[{\"internalType\":\"contract ICircleBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"circleDestinationDomains\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"forecaller\",\"type\":\"address\"}],\"name\":\"forecall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forecaller\",\"type\":\"address\"}],\"name\":\"forecallWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"srcTradeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"destTradeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fallbackRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"inputPos\",\"type\":\"uint16\"}],\"name\":\"nativeTradeSendTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"siblings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"nativeTradeSendTrade(string,bytes,bytes,bytes32,address,uint16)\":{\"details\":\"Swap native token to USDC, burn it, and send swap payload to AxelarGateway contract\",\"params\":{\"destTradeData\":\"Trade data for the second swap\",\"destinationChain\":\"Name of the destination chain\",\"fallbackRecipient\":\"Recipient address to receive USDC token if the swap fails\",\"inputPos\":\"Position of the input token in destTradeData\",\"srcTradeData\":\"Trade data for the first swap\",\"traceId\":\"Trace ID of the swap\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrosschainNativeSwap.sol\":\"CrosschainNativeSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarForecallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IAxelarGateway } from './IAxelarGateway.sol';\\nimport { IERC20 } from './IERC20.sol';\\n\\nabstract contract IAxelarForecallable {\\n    error NotApprovedByGateway();\\n    error AlreadyForecalled();\\n    error TransferFailed();\\n\\n    IAxelarGateway public gateway;\\n    mapping(bytes32 => address) forecallers;\\n\\n    constructor(address gatewayAddress) {\\n        gateway = IAxelarGateway(gatewayAddress);\\n    }\\n\\n    function forecall(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        address forecaller\\n    ) external {\\n        _checkForecall(sourceChain, sourceAddress, payload, forecaller);\\n        if (forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))] != address(0)) revert AlreadyForecalled();\\n        forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))] = forecaller;\\n        _execute(sourceChain, sourceAddress, payload);\\n    }\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash)) revert NotApprovedByGateway();\\n        address forecaller = forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))];\\n        if (forecaller != address(0)) {\\n            forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))] = address(0);\\n        } else {\\n            _execute(sourceChain, sourceAddress, payload);\\n        }\\n    }\\n\\n    function forecallWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount,\\n        address forecaller\\n    ) external {\\n        address token = gateway.tokenAddresses(tokenSymbol);\\n        uint256 amountPost = amountPostFee(amount, payload);\\n        _safeTransferFrom(token, msg.sender, amountPost);\\n        _checkForecallWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount, forecaller);\\n        if (forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))] != address(0))\\n            revert AlreadyForecalled();\\n        forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))] = forecaller;\\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amountPost);\\n    }\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n        if (!gateway.validateContractCallAndMint(commandId, sourceChain, sourceAddress, payloadHash, tokenSymbol, amount))\\n            revert NotApprovedByGateway();\\n        address forecaller = forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))];\\n        if (forecaller != address(0)) {\\n            forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))] = address(0);\\n            address token = gateway.tokenAddresses(tokenSymbol);\\n            _safeTransfer(token, forecaller, amount);\\n        } else {\\n            _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\\n        }\\n    }\\n\\n    function _execute(\\n        string memory sourceChain,\\n        string memory sourceAddress,\\n        bytes calldata payload\\n    ) internal virtual {}\\n\\n    function _executeWithToken(\\n        string memory sourceChain,\\n        string memory sourceAddress,\\n        bytes calldata payload,\\n        string memory tokenSymbol,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    // Override this to keep a fee.\\n    function amountPostFee(\\n        uint256 amount,\\n        bytes calldata /*payload*/\\n    ) public virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    // Override this and revert if you want to only allow certain people/calls to be able to forecall.\\n    function _checkForecall(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        address forecaller\\n    ) internal virtual {}\\n\\n    // Override this and revert if you want to only allow certain people/calls to be able to forecall.\\n    function _checkForecallWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount,\\n        address forecaller\\n    ) internal virtual {}\\n\\n    function _safeTransfer(\\n        address tokenAddress,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory returnData) = tokenAddress.call(abi.encodeWithSelector(IERC20.transfer.selector, receiver, amount));\\n        bool transferred = success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n\\n        if (!transferred || tokenAddress.code.length == 0) revert TransferFailed();\\n    }\\n\\n    function _safeTransferFrom(\\n        address tokenAddress,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory returnData) = tokenAddress.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, address(this), amount)\\n        );\\n        bool transferred = success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n\\n        if (!transferred || tokenAddress.code.length == 0) revert TransferFailed();\\n    }\\n}\\n\",\"keccak256\":\"0x2031d2c2ff7120c6403ab2af4e9100b415a45101d6ae2664ebd184a266bd458e\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGasService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IUpgradable.sol';\\n\\n// This should be owned by the microservice that is paying for gas.\\ninterface IAxelarGasService is IUpgradable {\\n    error NothingReceived();\\n    error TransferFailed();\\n    error InvalidAddress();\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(bytes32 indexed txHash, uint256 indexed logIndex, address gasToken, uint256 gasFeeAmount, address refundAddress);\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function collectFees(address payable receiver, address[] calldata tokens) external;\\n\\n    function refund(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5e8b391cc6c2f528ff0eaab218bc1395329ab959872cd590d682be2321cfb76\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error NotProxy();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(address indexed sender, string destinationChain, string destinationAddress, string symbol, uint256 amount);\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    function adminEpoch() external view returns (uint256);\\n\\n    function adminThreshold(uint256 epoch) external view returns (uint256);\\n\\n    function admins(uint256 epoch) external view returns (address[] memory);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\",\"keccak256\":\"0x810f2eab60267046fc188b8357b73d81d7b7959959781cb8b90b7957d162b05e\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    error InvalidAccount();\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x9e0821bdcdd893b070fab69ec20053ff99d96bc25054c349a9112036a23d9e5c\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// General interface for upgradable contracts\\ninterface IUpgradable {\\n    error NotOwner();\\n    error InvalidOwner();\\n    error InvalidCodeHash();\\n    error InvalidImplementation();\\n    error SetupFailed();\\n    error NotProxy();\\n\\n    event Upgraded(address indexed newImplementation);\\n    event OwnershipTransferred(address indexed newOwner);\\n\\n    // Get current owner\\n    function owner() external view returns (address);\\n\\n    function contractId() external pure returns (bytes32);\\n\\n    function implementation() external view returns (address);\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata params\\n    ) external;\\n\\n    function setup(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x27d750d5bce09e171601c0cc91325b8e2dda72732d6b188d185dd20554804f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CrosschainNativeSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IAxelarForecallable} from \\\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarForecallable.sol\\\";\\nimport {IAxelarGasService} from \\\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGasService.sol\\\";\\nimport {IAxelarGateway} from \\\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGateway.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ICircleBridge} from \\\"./ICircleBridge.sol\\\";\\nimport \\\"./StringAddressUtils.sol\\\";\\n\\ncontract CrosschainNativeSwap is IAxelarForecallable, Ownable {\\n    IERC20 public usdc;\\n    ICircleBridge public circleBridge;\\n    IAxelarGasService immutable gasReceiver;\\n\\n    // mapping chain name => domain number;\\n    mapping(string => uint32) public circleDestinationDomains;\\n    // mapping destination chain name => destination contract address\\n    mapping(string => address) public siblings;\\n\\n    bytes32 constant CHAIN_ETHEREUM = keccak256(abi.encodePacked(\\\"ethereum-2\\\"));\\n    bytes32 constant CHAIN_AVALANCHE = keccak256(abi.encodePacked(\\\"avalanche\\\"));\\n\\n    error InvalidTrade();\\n    error InsufficientInput();\\n    error TradeFailed();\\n\\n    event SwapSuccess(bytes32 indexed traceId, uint256 amount, bytes tradeData);\\n\\n    event SwapFailed(\\n        bytes32 indexed traceId,\\n        uint256 amount,\\n        address refundAddress\\n    );\\n\\n    constructor(\\n        address _usdc,\\n        address _gasReceiver,\\n        address _gateway,\\n        address _circleBridge\\n    ) IAxelarForecallable(_gateway) Ownable() {\\n        usdc = IERC20(_usdc);\\n        circleBridge = ICircleBridge(_circleBridge);\\n        gasReceiver = IAxelarGasService(_gasReceiver);\\n        circleDestinationDomains[\\\"ethereum\\\"] = 0;\\n        circleDestinationDomains[\\\"avalanche\\\"] = 1;\\n    }\\n\\n    modifier isValidChain(string memory destinationChain) {\\n        require(\\n            keccak256(abi.encodePacked(destinationChain)) == CHAIN_ETHEREUM ||\\n                keccak256(abi.encodePacked(destinationChain)) ==\\n                CHAIN_AVALANCHE,\\n            \\\"Invalid chain\\\"\\n        );\\n        _;\\n    }\\n\\n    // Set address for this contract that deployed at another chain\\n    function addSibling(string memory chain_, address address_)\\n        external\\n        onlyOwner\\n    {\\n        siblings[chain_] = address_;\\n    }\\n\\n    /**\\n     * @dev Swap native token to USDC, burn it, and send swap payload to AxelarGateway contract\\n     * @param destinationChain Name of the destination chain\\n     * @param srcTradeData Trade data for the first swap\\n     * @param destTradeData Trade data for the second swap\\n     * @param traceId Trace ID of the swap\\n     * @param fallbackRecipient Recipient address to receive USDC token if the swap fails\\n     * @param inputPos Position of the input token in destTradeData\\n     */\\n    function nativeTradeSendTrade(\\n        string memory destinationChain,\\n        bytes memory srcTradeData,\\n        bytes memory destTradeData,\\n        bytes32 traceId,\\n        address fallbackRecipient,\\n        uint16 inputPos\\n    ) external payable isValidChain(destinationChain) {\\n        // Swap native token to USDC\\n        (uint256 nativeSwapAmount, uint256 usdcAmount) = _trade(srcTradeData);\\n\\n        _depositAndBurnUSDC(\\n            usdcAmount,\\n            destinationChain,\\n            this.siblings(destinationChain)\\n        );\\n\\n        // encode the payload to send to the sibling contract\\n        bytes memory payload = abi.encode(\\n            destTradeData,\\n            usdcAmount,\\n            traceId,\\n            fallbackRecipient,\\n            inputPos\\n        );\\n\\n        // Pay gas to AxelarGasReceiver contract with native token to execute the sibling contract at the destination chain\\n        _payGasAndCallContract(\\n            destinationChain,\\n            payload,\\n            msg.value - nativeSwapAmount\\n        );\\n    }\\n\\n    function _payGasAndCallContract(\\n        string memory destinationChain,\\n        bytes memory payload,\\n        uint256 fee\\n    ) private {\\n        gasReceiver.payNativeGasForContractCall{value: fee}(\\n            address(this),\\n            destinationChain,\\n            AddressToString.toString(this.siblings(destinationChain)),\\n            payload,\\n            msg.sender\\n        );\\n\\n        // Send all information to AxelarGateway contract.\\n        gateway.callContract(\\n            destinationChain,\\n            AddressToString.toString(this.siblings(destinationChain)),\\n            payload\\n        );\\n    }\\n\\n    function _depositAndBurnUSDC(\\n        uint256 amount,\\n        string memory destinationChain,\\n        address recipient\\n    ) private isValidChain(destinationChain) {\\n        IERC20(address(usdc)).approve(address(circleBridge), amount);\\n\\n        circleBridge.depositForBurn(\\n            amount,\\n            this.circleDestinationDomains(destinationChain),\\n            bytes32(uint256(uint160(recipient))),\\n            address(usdc)\\n        );\\n    }\\n\\n    function _tradeSrc(bytes memory tradeData)\\n        internal\\n        returns (bool success, uint256 amount)\\n    {\\n        (uint256 amountIn, address router, bytes memory data) = abi.decode(\\n            tradeData,\\n            (uint256, address, bytes)\\n        );\\n        (success, ) = router.call{value: amountIn}(data);\\n        return (success, amountIn);\\n    }\\n\\n    function _trade(bytes memory tradeData1)\\n        private\\n        returns (uint256 amount, uint256 burnAmount)\\n    {\\n        // Calculate remaining usdc token in the contract\\n        uint256 preTradeBalance = IERC20(address(usdc)).balanceOf(\\n            address(this)\\n        );\\n\\n        // Swap native token to USDC\\n        (bool success, uint256 _nativeSwapAmount) = _tradeSrc(tradeData1);\\n\\n        // Revert if trade failed\\n        require(success, \\\"TRADE_FAILED\\\");\\n\\n        // Calculate amount of USDC token swapped. This is the amount to be burned at the source chain.\\n        uint256 _usdcAmount = IERC20(address(usdc)).balanceOf(address(this)) -\\n            preTradeBalance;\\n\\n        // Return amount of native token swapped and amount of USDC token to be burned\\n        return (_nativeSwapAmount, _usdcAmount);\\n    }\\n\\n    function _refund(\\n        bytes32 traceId,\\n        uint256 amount,\\n        address recipient\\n    ) internal {\\n        SafeERC20.safeTransfer(IERC20(address(usdc)), recipient, amount);\\n        emit SwapFailed(traceId, amount, recipient);\\n    }\\n\\n    // This function will be called by Axelar Executor service.\\n    function _execute(\\n        string memory, /*sourceChain*/\\n        string memory, /*sourceAddress*/\\n        bytes calldata payload\\n    ) internal override {\\n        // Decode payload\\n        (\\n            bytes memory tradeData,\\n            uint256 usdcAmount,\\n            bytes32 traceId,\\n            address fallbackRecipient,\\n            uint16 inputPos\\n        ) = abi.decode(payload, (bytes, uint256, bytes32, address, uint16));\\n\\n        // Decode trade data to get srcToken, router and swap data\\n        (address srcToken, , address router, bytes memory data) = abi.decode(\\n            tradeData,\\n            (address, uint256, address, bytes)\\n        );\\n\\n        // If the input token is not USDC, refund USDC to the user.\\n        if (srcToken != address(usdc))\\n            return _refund(traceId, usdcAmount, fallbackRecipient);\\n\\n        // This hack puts the amount in the correct position.\\n        assembly {\\n            mstore(add(tradeData, inputPos), usdcAmount)\\n        }\\n\\n        // Approve USDC to the router contract\\n        IERC20(srcToken).approve(router, usdcAmount);\\n\\n        // Swap USDC to native token\\n        (bool swapSuccess, ) = router.call(data);\\n\\n        // If swap failed, refund USDC to the user.\\n        if (!swapSuccess)\\n            return _refund(traceId, usdcAmount, fallbackRecipient);\\n\\n        // Emit success event so that our application can be notified.\\n        emit SwapSuccess(traceId, usdcAmount, tradeData);\\n    }\\n}\\n\",\"keccak256\":\"0x6488d19cd9a74e0f9b2b2332becfa12938540a8e00239482dc4bce9d553e6a47\",\"license\":\"MIT\"},\"contracts/ICircleBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\ninterface ICircleBridge {\\n    // this event will be emitted when `depositForBurn` function is called.\\n    event MessageSent(bytes message);\\n\\n    /**\\n    * @param _amount amount of tokens to burn\\n    * @param _destinationDomain destination domain\\n    * @param _mintRecipient address of mint recipient on destination domain\\n    * @param _burnToken address of contract to burn deposited tokens, on local\\n    domain\\n    * @return _nonce uint64, unique nonce for each burn\\n    */\\n    function depositForBurn(\\n        uint256 _amount,\\n        uint32 _destinationDomain,\\n        bytes32 _mintRecipient,\\n        address _burnToken\\n    ) external returns (uint64 _nonce);\\n}\\n\",\"keccak256\":\"0xf0cfdece3c3fe7368f708b16b422aca7295da1dc167ec746de6ad937efe8f65a\",\"license\":\"UNLICENSED\"},\"contracts/StringAddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nlibrary StringToAddress {\\n    function toAddress(string memory _a) internal pure returns (address) {\\n        bytes memory tmp = bytes(_a);\\n        if (tmp.length != 42) return address(0);\\n        uint160 iaddr = 0;\\n        uint8 b;\\n        for (uint256 i = 2; i < 42; i++) {\\n            b = uint8(tmp[i]);\\n            if ((b >= 97) && (b <= 102)) b -= 87;\\n            else if ((b >= 65) && (b <= 70)) b -= 55;\\n            else if ((b >= 48) && (b <= 57)) b -= 48;\\n            else return address(0);\\n            iaddr |= uint160(uint256(b) << ((41 - i) << 2));\\n        }\\n        return address(iaddr);\\n    }\\n}\\n\\nlibrary AddressToString {\\n    function toString(address a) internal pure returns (string memory) {\\n        bytes memory data = abi.encodePacked(a);\\n        bytes memory characters = \\\"0123456789abcdef\\\";\\n        bytes memory byteString = new bytes(2 + data.length * 2);\\n\\n        byteString[0] = \\\"0\\\";\\n        byteString[1] = \\\"x\\\";\\n\\n        for (uint256 i; i < data.length; ++i) {\\n            byteString[2 + i * 2] = characters[uint256(uint8(data[i] >> 4))];\\n            byteString[3 + i * 2] = characters[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(byteString);\\n    }\\n}\\n\",\"keccak256\":\"0x792e71d9ab1dc5c755e4d42275ae0a1d0523c2c8b74094407b028f95cb578861\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063715018a61161008a578063bb288a0311610059578063bb288a03146102e2578063daa0c9171461030b578063e7fb058b14610327578063f2fde38b14610350576100e8565b8063715018a6146102265780638b5ba9c81461023d5780638da5cb5b1461027a578063a7798b69146102a5576100e8565b80631a98b2e0116100c65780631a98b2e01461016c5780633ca2fd8e146101955780633e413bee146101d257806349160658146101fd576100e8565b806301a67b6b146100ed5780630b48ae8614610118578063116191b614610141575b600080fd5b3480156100f957600080fd5b50610102610379565b60405161010f919061288c565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a9190612a3f565b61039f565b005b34801561014d57600080fd5b50610156610408565b6040516101639190612abc565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e9190612bf9565b61042c565b005b3480156101a157600080fd5b506101bc60048036038101906101b79190612d09565b61080e565b6040516101c99190612d78565b60405180910390f35b3480156101de57600080fd5b506101e761081a565b6040516101f49190612db4565b60405180910390f35b34801561020957600080fd5b50610224600480360381019061021f9190612dcf565b610840565b005b34801561023257600080fd5b5061023b610b0b565b005b34801561024957600080fd5b50610264600480360381019061025f9190612e98565b610b1f565b6040516102719190612f00565b60405180910390f35b34801561028657600080fd5b5061028f610b58565b60405161029c9190612f2a565b60405180910390f35b3480156102b157600080fd5b506102cc60048036038101906102c79190612e98565b610b82565b6040516102d99190612f2a565b60405180910390f35b3480156102ee57600080fd5b5061030960048036038101906103049190612f45565b610bcb565b005b610325600480360381019061032091906130e9565b610dc2565b005b34801561033357600080fd5b5061034e600480360381019061034991906131ca565b610f94565b005b34801561035c57600080fd5b50610377600480360381019061037291906132da565b6112af565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103a7611333565b806006836040516103b89190613381565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000858560405161043e9291906133c8565b6040518091039020905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b81526004016104b19998979695949392919061342e565b602060405180830381600087803b1580156104cb57600080fd5b505af11580156104df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050391906134e2565b610539576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008c8c8c8c8c8c8c8c8c6040516020016105609998979695949392919061354d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610725576000600160008d8d8d8d8d8d8d8d8d6040516020016106029998979695949392919061354d565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663935b13f687876040518363ffffffff1660e01b81526004016106c29291906135c4565b60206040518083038186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071291906135fd565b905061071f8183866113b1565b50610800565b6107ff8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505088611527565b5b505050505050505050505050565b60008390509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082826040516108529291906133c8565b6040518091039020905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b81526004016108bf9695949392919061362a565b602060405180830381600087803b1580156108d957600080fd5b505af11580156108ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091191906134e2565b610947576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001600089898989898960405160200161096896959493929190613681565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a6b576000600160008a8a8a8a8a8a604051602001610a0496959493929190613681565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b00565b610aff88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050868661152f565b5b505050505050505050565b610b13611333565b610b1d6000611745565b565b6005818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900463ffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6006818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bda8787878787878761180b565b600073ffffffffffffffffffffffffffffffffffffffff1660016000898989898989604051602001610c1196959493929190613681565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ca3576040517f35b7d55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000898989898989604051602001610cc396959493929190613681565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610db987878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050858561152f565b50505050505050565b85604051602001610dd29061371f565b6040516020818303038152906040528051906020012081604051602001610df99190613381565b604051602081830303815290604052805190602001201480610e645750604051602001610e2590613780565b6040516020818303038152906040528051906020012081604051602001610e4c9190613381565b60405160208183030381529060405280519060200120145b610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a906137e1565b60405180910390fd5b600080610eaf88611814565b91509150610f46818a3073ffffffffffffffffffffffffffffffffffffffff1663a7798b698d6040518263ffffffff1660e01b8152600401610ef1919061383a565b60206040518083038186803b158015610f0957600080fd5b505afa158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4191906135fd565b6119df565b60008782888888604051602001610f619594939291906138af565b6040516020818303038152906040529050610f888a828534610f839190613938565b611d0f565b50505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663935b13f686866040518363ffffffff1660e01b8152600401610ff29291906135c4565b60206040518083038186803b15801561100a57600080fd5b505afa15801561101e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104291906135fd565b9050600061105184898961080e565b905061105e823383611f57565b6110708c8c8c8c8c8c8c8c8c8c6120cf565b600073ffffffffffffffffffffffffffffffffffffffff16600160008e8e8e8e8e8e8e8e8e6040516020016110ad9998979695949392919061354d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461113f576040517f35b7d55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600160008e8e8e8e8e8e8e8e8e6040516020016111659998979695949392919061354d565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112a18c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508a8a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086611527565b505050505050505050505050565b6112b7611333565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131e906139de565b60405180910390fd5b61133081611745565b50565b61133b6120db565b73ffffffffffffffffffffffffffffffffffffffff16611359610b58565b73ffffffffffffffffffffffffffffffffffffffff16146113af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a690613a4a565b60405180910390fd5b565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016113e6929190613a6a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114509190613ac4565b6000604051808303816000865af19150503d806000811461148d576040519150601f19603f3d011682016040523d82523d6000602084013e611492565b606091505b509150915060008280156114c257506000825114806114c15750818060200190518101906114c091906134e2565b5b5b90508015806114e8575060008673ffffffffffffffffffffffffffffffffffffffff163b145b1561151f576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b505050505050565b600080600080600086868101906115469190613b19565b945094509450945094506000806000878060200190518101906115699190613c4a565b93509350509250600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146115dd576115d08688876120e3565b505050505050505061173f565b86848901528273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383896040518363ffffffff1660e01b815260040161161d929190613a6a565b602060405180830381600087803b15801561163757600080fd5b505af115801561164b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166f91906134e2565b5060008273ffffffffffffffffffffffffffffffffffffffff16826040516116979190613ac4565b6000604051808303816000865af19150503d80600081146116d4576040519150601f19603f3d011682016040523d82523d6000602084013e6116d9565b606091505b50509050806116fb576116ed8789886120e3565b50505050505050505061173f565b867f2eee7242b494decec975364a3a68cc2983c8c343618698e44ca690103af76175898b60405161172d929190613ccd565b60405180910390a25050505050505050505b50505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50505050505050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118749190612f2a565b60206040518083038186803b15801561188c57600080fd5b505afa1580156118a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c49190613cfd565b90506000806118d28661214f565b9150915081611916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190d90613d76565b60405180910390fd5b600083600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119749190612f2a565b60206040518083038186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c49190613cfd565b6119ce9190613938565b905081819550955050505050915091565b816040516020016119ef9061371f565b6040516020818303038152906040528051906020012081604051602001611a169190613381565b604051602081830303815290604052805190602001201480611a815750604051602001611a4290613780565b6040516020818303038152906040528051906020012081604051602001611a699190613381565b60405160208183030381529060405280519060200120145b611ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab7906137e1565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b8152600401611b3f929190613a6a565b602060405180830381600087803b158015611b5957600080fd5b505af1158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9191906134e2565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fd3504e853073ffffffffffffffffffffffffffffffffffffffff16638b5ba9c8876040518263ffffffff1660e01b8152600401611c0a919061383a565b60206040518083038186803b158015611c2257600080fd5b505afa158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5a9190613dc2565b8573ffffffffffffffffffffffffffffffffffffffff1660001b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401611cb69493929190613def565b602060405180830381600087803b158015611cd057600080fd5b505af1158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d089190613e74565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c93e3bb823086611ddf3073ffffffffffffffffffffffffffffffffffffffff1663a7798b698a6040518263ffffffff1660e01b8152600401611d8a919061383a565b60206040518083038186803b158015611da257600080fd5b505afa158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda91906135fd565b6121ed565b87336040518763ffffffff1660e01b8152600401611e01959493929190613ea1565b6000604051808303818588803b158015611e1a57600080fd5b505af1158015611e2e573d6000803e3d6000fd5b505050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c92115f84611f013073ffffffffffffffffffffffffffffffffffffffff1663a7798b69886040518263ffffffff1660e01b8152600401611eac919061383a565b60206040518083038186803b158015611ec457600080fd5b505afa158015611ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efc91906135fd565b6121ed565b856040518463ffffffff1660e01b8152600401611f2093929190613f09565b600060405180830381600087803b158015611f3a57600080fd5b505af1158015611f4e573d6000803e3d6000fd5b50505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b853086604051602401611f8e93929190613f55565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611ff89190613ac4565b6000604051808303816000865af19150503d8060008114612035576040519150601f19603f3d011682016040523d82523d6000602084013e61203a565b606091505b5091509150600082801561206a575060008251148061206957508180602001905181019061206891906134e2565b5b5b9050801580612090575060008673ffffffffffffffffffffffffffffffffffffffff163b145b156120c7576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b50505050505050505050565b600033905090565b612110600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828461250a565b827f558c0ee8c786238cf77a23150b8f030420c53c82aa0488213ace44ee1cfc92f48383604051612142929190613f8c565b60405180910390a2505050565b60008060008060008580602001905181019061216b9190613fb5565b9250925092508173ffffffffffffffffffffffffffffffffffffffff1683826040516121979190613ac4565b60006040518083038185875af1925050503d80600081146121d4576040519150601f19603f3d011682016040523d82523d6000602084013e6121d9565b606091505b505080955050848394509450505050915091565b6060600082604051602001612202919061406c565b604051602081830303815290604052905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060006002835161225d9190614087565b600261226991906140e1565b67ffffffffffffffff811115612282576122816128d6565b5b6040519080825280601f01601f1916602001820160405280156122b45781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106122ec576122eb614137565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106123505761234f614137565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b83518110156124fe578260048583815181106123a1576123a0614137565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff16815181106123e7576123e6614137565b5b602001015160f81c60f81b826002836124009190614087565b600261240c91906140e1565b8151811061241d5761241c614137565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85838151811061246557612464614137565b5b602001015160f81c60f81b1660f81c60ff168151811061248857612487614137565b5b602001015160f81c60f81b826002836124a19190614087565b60036124ad91906140e1565b815181106124be576124bd614137565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806124f790614166565b9050612382565b50809350505050919050565b61258b8363a9059cbb60e01b8484604051602401612529929190613a6a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612590565b505050565b60006125f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166126579092919063ffffffff16565b9050600081511115612652578080602001905181019061261291906134e2565b612651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264890614221565b60405180910390fd5b5b505050565b6060612666848460008561266f565b90509392505050565b6060824710156126b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ab906142b3565b60405180910390fd5b6126bd85612783565b6126fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f39061431f565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516127259190613ac4565b60006040518083038185875af1925050503d8060008114612762576040519150601f19603f3d011682016040523d82523d6000602084013e612767565b606091505b50915091506127778282866127a6565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156127b657829050612806565b6000835111156127c95782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fd919061383a565b60405180910390fd5b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061285261284d6128488461280d565b61282d565b61280d565b9050919050565b600061286482612837565b9050919050565b600061287682612859565b9050919050565b6128868161286b565b82525050565b60006020820190506128a1600083018461287d565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61290e826128c5565b810181811067ffffffffffffffff8211171561292d5761292c6128d6565b5b80604052505050565b60006129406128a7565b905061294c8282612905565b919050565b600067ffffffffffffffff82111561296c5761296b6128d6565b5b612975826128c5565b9050602081019050919050565b82818337600083830152505050565b60006129a461299f84612951565b612936565b9050828152602081018484840111156129c0576129bf6128c0565b5b6129cb848285612982565b509392505050565b600082601f8301126129e8576129e76128bb565b5b81356129f8848260208601612991565b91505092915050565b6000612a0c8261280d565b9050919050565b612a1c81612a01565b8114612a2757600080fd5b50565b600081359050612a3981612a13565b92915050565b60008060408385031215612a5657612a556128b1565b5b600083013567ffffffffffffffff811115612a7457612a736128b6565b5b612a80858286016129d3565b9250506020612a9185828601612a2a565b9150509250929050565b6000612aa682612859565b9050919050565b612ab681612a9b565b82525050565b6000602082019050612ad16000830184612aad565b92915050565b6000819050919050565b612aea81612ad7565b8114612af557600080fd5b50565b600081359050612b0781612ae1565b92915050565b600080fd5b600080fd5b60008083601f840112612b2d57612b2c6128bb565b5b8235905067ffffffffffffffff811115612b4a57612b49612b0d565b5b602083019150836001820283011115612b6657612b65612b12565b5b9250929050565b60008083601f840112612b8357612b826128bb565b5b8235905067ffffffffffffffff811115612ba057612b9f612b0d565b5b602083019150836001820283011115612bbc57612bbb612b12565b5b9250929050565b6000819050919050565b612bd681612bc3565b8114612be157600080fd5b50565b600081359050612bf381612bcd565b92915050565b60008060008060008060008060008060c08b8d031215612c1c57612c1b6128b1565b5b6000612c2a8d828e01612af8565b9a505060208b013567ffffffffffffffff811115612c4b57612c4a6128b6565b5b612c578d828e01612b17565b995099505060408b013567ffffffffffffffff811115612c7a57612c796128b6565b5b612c868d828e01612b17565b975097505060608b013567ffffffffffffffff811115612ca957612ca86128b6565b5b612cb58d828e01612b6d565b955095505060808b013567ffffffffffffffff811115612cd857612cd76128b6565b5b612ce48d828e01612b17565b935093505060a0612cf78d828e01612be4565b9150509295989b9194979a5092959850565b600080600060408486031215612d2257612d216128b1565b5b6000612d3086828701612be4565b935050602084013567ffffffffffffffff811115612d5157612d506128b6565b5b612d5d86828701612b6d565b92509250509250925092565b612d7281612bc3565b82525050565b6000602082019050612d8d6000830184612d69565b92915050565b6000612d9e82612859565b9050919050565b612dae81612d93565b82525050565b6000602082019050612dc96000830184612da5565b92915050565b60008060008060008060006080888a031215612dee57612ded6128b1565b5b6000612dfc8a828b01612af8565b975050602088013567ffffffffffffffff811115612e1d57612e1c6128b6565b5b612e298a828b01612b17565b9650965050604088013567ffffffffffffffff811115612e4c57612e4b6128b6565b5b612e588a828b01612b17565b9450945050606088013567ffffffffffffffff811115612e7b57612e7a6128b6565b5b612e878a828b01612b6d565b925092505092959891949750929550565b600060208284031215612eae57612ead6128b1565b5b600082013567ffffffffffffffff811115612ecc57612ecb6128b6565b5b612ed8848285016129d3565b91505092915050565b600063ffffffff82169050919050565b612efa81612ee1565b82525050565b6000602082019050612f156000830184612ef1565b92915050565b612f2481612a01565b82525050565b6000602082019050612f3f6000830184612f1b565b92915050565b60008060008060008060006080888a031215612f6457612f636128b1565b5b600088013567ffffffffffffffff811115612f8257612f816128b6565b5b612f8e8a828b01612b17565b9750975050602088013567ffffffffffffffff811115612fb157612fb06128b6565b5b612fbd8a828b01612b17565b9550955050604088013567ffffffffffffffff811115612fe057612fdf6128b6565b5b612fec8a828b01612b6d565b93509350506060612fff8a828b01612a2a565b91505092959891949750929550565b600067ffffffffffffffff821115613029576130286128d6565b5b613032826128c5565b9050602081019050919050565b600061305261304d8461300e565b612936565b90508281526020810184848401111561306e5761306d6128c0565b5b613079848285612982565b509392505050565b600082601f830112613096576130956128bb565b5b81356130a684826020860161303f565b91505092915050565b600061ffff82169050919050565b6130c6816130af565b81146130d157600080fd5b50565b6000813590506130e3816130bd565b92915050565b60008060008060008060c08789031215613106576131056128b1565b5b600087013567ffffffffffffffff811115613124576131236128b6565b5b61313089828a016129d3565b965050602087013567ffffffffffffffff811115613151576131506128b6565b5b61315d89828a01613081565b955050604087013567ffffffffffffffff81111561317e5761317d6128b6565b5b61318a89828a01613081565b945050606061319b89828a01612af8565b93505060806131ac89828a01612a2a565b92505060a06131bd89828a016130d4565b9150509295509295509295565b60008060008060008060008060008060c08b8d0312156131ed576131ec6128b1565b5b60008b013567ffffffffffffffff81111561320b5761320a6128b6565b5b6132178d828e01612b17565b9a509a505060208b013567ffffffffffffffff81111561323a576132396128b6565b5b6132468d828e01612b17565b985098505060408b013567ffffffffffffffff811115613269576132686128b6565b5b6132758d828e01612b6d565b965096505060608b013567ffffffffffffffff811115613298576132976128b6565b5b6132a48d828e01612b17565b945094505060806132b78d828e01612be4565b92505060a06132c88d828e01612a2a565b9150509295989b9194979a5092959850565b6000602082840312156132f0576132ef6128b1565b5b60006132fe84828501612a2a565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561333b578082015181840152602081019050613320565b8381111561334a576000848401525b50505050565b600061335b82613307565b6133658185613312565b935061337581856020860161331d565b80840191505092915050565b600061338d8284613350565b915081905092915050565b600081905092915050565b60006133af8385613398565b93506133bc838584612982565b82840190509392505050565b60006133d58284866133a3565b91508190509392505050565b6133ea81612ad7565b82525050565b600082825260208201905092915050565b600061340d83856133f0565b935061341a838584612982565b613423836128c5565b840190509392505050565b600060c082019050613443600083018c6133e1565b8181036020830152613456818a8c613401565b9050818103604083015261346b81888a613401565b905061347a60608301876133e1565b818103608083015261348d818587613401565b905061349c60a0830184612d69565b9a9950505050505050505050565b60008115159050919050565b6134bf816134aa565b81146134ca57600080fd5b50565b6000815190506134dc816134b6565b92915050565b6000602082840312156134f8576134f76128b1565b5b6000613506848285016134cd565b91505092915050565b600082825260208201905092915050565b600061352c838561350f565b9350613539838584612982565b613542836128c5565b840190509392505050565b600060a0820190508181036000830152613568818b8d613401565b9050818103602083015261357d81898b613401565b90508181036040830152613592818789613520565b905081810360608301526135a7818587613401565b90506135b66080830184612d69565b9a9950505050505050505050565b600060208201905081810360008301526135df818486613401565b90509392505050565b6000815190506135f781612a13565b92915050565b600060208284031215613613576136126128b1565b5b6000613621848285016135e8565b91505092915050565b600060808201905061363f60008301896133e1565b8181036020830152613652818789613401565b90508181036040830152613667818587613401565b905061367660608301846133e1565b979650505050505050565b6000606082019050818103600083015261369c81888a613401565b905081810360208301526136b1818688613401565b905081810360408301526136c6818486613520565b9050979650505050505050565b7f657468657265756d2d3200000000000000000000000000000000000000000000600082015250565b6000613709600a83613312565b9150613714826136d3565b600a82019050919050565b600061372a826136fc565b9150819050919050565b7f6176616c616e6368650000000000000000000000000000000000000000000000600082015250565b600061376a600983613312565b915061377582613734565b600982019050919050565b600061378b8261375d565b9150819050919050565b7f496e76616c696420636861696e00000000000000000000000000000000000000600082015250565b60006137cb600d836133f0565b91506137d682613795565b602082019050919050565b600060208201905081810360008301526137fa816137be565b9050919050565b600061380c82613307565b61381681856133f0565b935061382681856020860161331d565b61382f816128c5565b840191505092915050565b600060208201905081810360008301526138548184613801565b905092915050565b600081519050919050565b60006138728261385c565b61387c818561350f565b935061388c81856020860161331d565b613895816128c5565b840191505092915050565b6138a9816130af565b82525050565b600060a08201905081810360008301526138c98188613867565b90506138d86020830187612d69565b6138e560408301866133e1565b6138f26060830185612f1b565b6138ff60808301846138a0565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061394382612bc3565b915061394e83612bc3565b92508282101561396157613960613909565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006139c86026836133f0565b91506139d38261396c565b604082019050919050565b600060208201905081810360008301526139f7816139bb565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613a346020836133f0565b9150613a3f826139fe565b602082019050919050565b60006020820190508181036000830152613a6381613a27565b9050919050565b6000604082019050613a7f6000830185612f1b565b613a8c6020830184612d69565b9392505050565b6000613a9e8261385c565b613aa88185613398565b9350613ab881856020860161331d565b80840191505092915050565b6000613ad08284613a93565b915081905092915050565b6000613ae68261280d565b9050919050565b613af681613adb565b8114613b0157600080fd5b50565b600081359050613b1381613aed565b92915050565b600080600080600060a08688031215613b3557613b346128b1565b5b600086013567ffffffffffffffff811115613b5357613b526128b6565b5b613b5f88828901613081565b9550506020613b7088828901612be4565b9450506040613b8188828901612af8565b9350506060613b9288828901613b04565b9250506080613ba3888289016130d4565b9150509295509295909350565b600081519050613bbf81613aed565b92915050565b600081519050613bd481612bcd565b92915050565b6000613bed613be88461300e565b612936565b905082815260208101848484011115613c0957613c086128c0565b5b613c1484828561331d565b509392505050565b600082601f830112613c3157613c306128bb565b5b8151613c41848260208601613bda565b91505092915050565b60008060008060808587031215613c6457613c636128b1565b5b6000613c7287828801613bb0565b9450506020613c8387828801613bc5565b9350506040613c9487828801613bb0565b925050606085015167ffffffffffffffff811115613cb557613cb46128b6565b5b613cc187828801613c1c565b91505092959194509250565b6000604082019050613ce26000830185612d69565b8181036020830152613cf48184613867565b90509392505050565b600060208284031215613d1357613d126128b1565b5b6000613d2184828501613bc5565b91505092915050565b7f54524144455f4641494c45440000000000000000000000000000000000000000600082015250565b6000613d60600c836133f0565b9150613d6b82613d2a565b602082019050919050565b60006020820190508181036000830152613d8f81613d53565b9050919050565b613d9f81612ee1565b8114613daa57600080fd5b50565b600081519050613dbc81613d96565b92915050565b600060208284031215613dd857613dd76128b1565b5b6000613de684828501613dad565b91505092915050565b6000608082019050613e046000830187612d69565b613e116020830186612ef1565b613e1e60408301856133e1565b613e2b6060830184612f1b565b95945050505050565b600067ffffffffffffffff82169050919050565b613e5181613e34565b8114613e5c57600080fd5b50565b600081519050613e6e81613e48565b92915050565b600060208284031215613e8a57613e896128b1565b5b6000613e9884828501613e5f565b91505092915050565b600060a082019050613eb66000830188612f1b565b8181036020830152613ec88187613801565b90508181036040830152613edc8186613801565b90508181036060830152613ef08185613867565b9050613eff6080830184612f1b565b9695505050505050565b60006060820190508181036000830152613f238186613801565b90508181036020830152613f378185613801565b90508181036040830152613f4b8184613867565b9050949350505050565b6000606082019050613f6a6000830186612f1b565b613f776020830185612f1b565b613f846040830184612d69565b949350505050565b6000604082019050613fa16000830185612d69565b613fae6020830184612f1b565b9392505050565b600080600060608486031215613fce57613fcd6128b1565b5b6000613fdc86828701613bc5565b9350506020613fed86828701613bb0565b925050604084015167ffffffffffffffff81111561400e5761400d6128b6565b5b61401a86828701613c1c565b9150509250925092565b60008160601b9050919050565b600061403c82614024565b9050919050565b600061404e82614031565b9050919050565b61406661406182612a01565b614043565b82525050565b60006140788284614055565b60148201915081905092915050565b600061409282612bc3565b915061409d83612bc3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156140d6576140d5613909565b5b828202905092915050565b60006140ec82612bc3565b91506140f783612bc3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561412c5761412b613909565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061417182612bc3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156141a4576141a3613909565b5b600182019050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061420b602a836133f0565b9150614216826141af565b604082019050919050565b6000602082019050818103600083015261423a816141fe565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061429d6026836133f0565b91506142a882614241565b604082019050919050565b600060208201905081810360008301526142cc81614290565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614309601d836133f0565b9150614314826142d3565b602082019050919050565b60006020820190508181036000830152614338816142fc565b905091905056fea2646970667358221220d3b8cd1fd5a69cf70cd249201ffb28f9e1f9123b8ed2db86cb8c8b1764cc0ac264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "nativeTradeSendTrade(string,bytes,bytes,bytes32,address,uint16)": {
        "details": "Swap native token to USDC, burn it, and send swap payload to AxelarGateway contract",
        "params": {
          "destTradeData": "Trade data for the second swap",
          "destinationChain": "Name of the destination chain",
          "fallbackRecipient": "Recipient address to receive USDC token if the swap fails",
          "inputPos": "Position of the input token in destTradeData",
          "srcTradeData": "Trade data for the first swap",
          "traceId": "Trace ID of the swap"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14,
        "contract": "contracts/CrosschainNativeSwap.sol:CrosschainNativeSwap",
        "label": "gateway",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAxelarGateway)1097"
      },
      {
        "astId": 18,
        "contract": "contracts/CrosschainNativeSwap.sol:CrosschainNativeSwap",
        "label": "forecallers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1237,
        "contract": "contracts/CrosschainNativeSwap.sol:CrosschainNativeSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2078,
        "contract": "contracts/CrosschainNativeSwap.sol:CrosschainNativeSwap",
        "label": "usdc",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1420"
      },
      {
        "astId": 2081,
        "contract": "contracts/CrosschainNativeSwap.sol:CrosschainNativeSwap",
        "label": "circleBridge",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICircleBridge)2627"
      },
      {
        "astId": 2088,
        "contract": "contracts/CrosschainNativeSwap.sol:CrosschainNativeSwap",
        "label": "circleDestinationDomains",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_uint32)"
      },
      {
        "astId": 2092,
        "contract": "contracts/CrosschainNativeSwap.sol:CrosschainNativeSwap",
        "label": "siblings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAxelarGateway)1097": {
        "encoding": "inplace",
        "label": "contract IAxelarGateway",
        "numberOfBytes": "20"
      },
      "t_contract(ICircleBridge)2627": {
        "encoding": "inplace",
        "label": "contract ICircleBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1420": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_uint32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}